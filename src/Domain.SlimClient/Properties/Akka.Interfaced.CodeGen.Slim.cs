// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Akka.Interfaced CodeGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Akka.Interfaced;
using ProtoBuf;
using TypeAlias;
using System.ComponentModel;

namespace Domain
{
    #region SurrogateForIActorRef

    [ProtoContract]
    public class SurrogateForIActorRef
    {
        [ProtoMember(1)] public int Id;

        [ProtoConverter]
        public static SurrogateForIActorRef Convert(IActorRef value)
        {
            if (value == null) return null;
            var actor = ((BoundActorRef)value);
            return new SurrogateForIActorRef { Id = actor.Id };
        }

        [ProtoConverter]
        public static IActorRef Convert(SurrogateForIActorRef value)
        {
            if (value == null) return null;
            return new BoundActorRef(value.Id);
        }
    }
}

#endregion
#region Domain.IOccupant

namespace Domain
{
    [PayloadTable(typeof(IOccupant), PayloadTableKind.Request)]
    public static class IOccupant_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(GetHistory_Invoke), typeof(GetHistory_Return) },
                { typeof(Invite_Invoke), null },
                { typeof(Say_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class GetHistory_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            public Type GetInterfaceType()
            {
                return typeof(IOccupant);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
            }
        }

        [ProtoContract, TypeAlias]
        public class GetHistory_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Collections.Generic.List<Domain.ChatItem> v;

            public Type GetInterfaceType()
            {
                return typeof(IOccupant);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class Invite_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            [ProtoMember(1)] public System.String targetUserId;
            [ProtoMember(2)] public System.String senderUserId;

            public Type GetInterfaceType()
            {
                return typeof(IOccupant);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
                senderUserId = (System.String)value;
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadTagOverridable
        {
            [ProtoMember(1)] public System.String msg;
            [ProtoMember(2)] public System.String senderUserId;

            public Type GetInterfaceType()
            {
                return typeof(IOccupant);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }

            void IPayloadTagOverridable.SetTag(object value)
            {
                senderUserId = (System.String)value;
            }
        }
    }

    public interface IOccupant_NoReply
    {
        void GetHistory();
        void Invite(System.String targetUserId, System.String senderUserId = null);
        void Say(System.String msg, System.String senderUserId = null);
    }

    public class OccupantRef : InterfacedActorRef, IOccupant, IOccupant_NoReply
    {
        public OccupantRef() : base(null)
        {
        }

        public OccupantRef(IActorRef actor) : base(actor)
        {
        }

        public OccupantRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IOccupant_NoReply WithNoReply()
        {
            return this;
        }

        public OccupantRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new OccupantRef(Actor, requestWaiter, Timeout);
        }

        public OccupantRef WithTimeout(TimeSpan? timeout)
        {
            return new OccupantRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Collections.Generic.List<Domain.ChatItem>> GetHistory()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOccupant_PayloadTable.GetHistory_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<Domain.ChatItem>>(requestMessage);
        }

        public Task Invite(System.String targetUserId, System.String senderUserId = null)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOccupant_PayloadTable.Invite_Invoke { targetUserId = targetUserId, senderUserId = senderUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Say(System.String msg, System.String senderUserId = null)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOccupant_PayloadTable.Say_Invoke { msg = msg, senderUserId = senderUserId }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IOccupant_NoReply.GetHistory()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOccupant_PayloadTable.GetHistory_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IOccupant_NoReply.Invite(System.String targetUserId, System.String senderUserId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOccupant_PayloadTable.Invite_Invoke { targetUserId = targetUserId, senderUserId = senderUserId }
            };
            SendRequest(requestMessage);
        }

        void IOccupant_NoReply.Say(System.String msg, System.String senderUserId)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IOccupant_PayloadTable.Say_Invoke { msg = msg, senderUserId = senderUserId }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIOccupant
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIOccupant Convert(IOccupant value)
        {
            if (value == null) return null;
            return new SurrogateForIOccupant { Actor = ((OccupantRef)value).Actor };
        }

        [ProtoConverter]
        public static IOccupant Convert(SurrogateForIOccupant value)
        {
            if (value == null) return null;
            return new OccupantRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IUser

namespace Domain
{
    [PayloadTable(typeof(IUser), PayloadTableKind.Request)]
    public static class IUser_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(EnterRoom_Invoke), typeof(EnterRoom_Return) },
                { typeof(ExitFromRoom_Invoke), null },
                { typeof(GetId_Invoke), typeof(GetId_Return) },
                { typeof(GetRoomList_Invoke), typeof(GetRoomList_Return) },
                { typeof(Whisper_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class EnterRoom_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.String name;
            [ProtoMember(2)] public Domain.IRoomObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class EnterRoom_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public System.Tuple<Domain.IOccupant, Domain.RoomInfo> v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    if (v.Item1 != null) updater(v.Item1);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class ExitFromRoom_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String name;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class GetId_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.String v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class GetRoomList_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class GetRoomList_Return
            : IInterfacedPayload, IValueGetable
        {
            [ProtoMember(1)] public System.Collections.Generic.List<System.String> v;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public object Value
            {
                get { return v; }
            }
        }

        [ProtoContract, TypeAlias]
        public class Whisper_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String targetUserId;
            [ProtoMember(2)] public System.String message;

            public Type GetInterfaceType()
            {
                return typeof(IUser);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }
    }

    public interface IUser_NoReply
    {
        void EnterRoom(System.String name, Domain.IRoomObserver observer);
        void ExitFromRoom(System.String name);
        void GetId();
        void GetRoomList();
        void Whisper(System.String targetUserId, System.String message);
    }

    public class UserRef : InterfacedActorRef, IUser, IUser_NoReply
    {
        public UserRef() : base(null)
        {
        }

        public UserRef(IActorRef actor) : base(actor)
        {
        }

        public UserRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUser_NoReply WithNoReply()
        {
            return this;
        }

        public UserRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserRef(Actor, requestWaiter, Timeout);
        }

        public UserRef WithTimeout(TimeSpan? timeout)
        {
            return new UserRef(Actor, RequestWaiter, timeout);
        }

        public Task<System.Tuple<Domain.IOccupant, Domain.RoomInfo>> EnterRoom(System.String name, Domain.IRoomObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.EnterRoom_Invoke { name = name, observer = observer }
            };
            return SendRequestAndReceive<System.Tuple<Domain.IOccupant, Domain.RoomInfo>>(requestMessage);
        }

        public Task ExitFromRoom(System.String name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.ExitFromRoom_Invoke { name = name }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task<System.String> GetId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            return SendRequestAndReceive<System.String>(requestMessage);
        }

        public Task<System.Collections.Generic.List<System.String>> GetRoomList()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.GetRoomList_Invoke {  }
            };
            return SendRequestAndReceive<System.Collections.Generic.List<System.String>>(requestMessage);
        }

        public Task Whisper(System.String targetUserId, System.String message)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.Whisper_Invoke { targetUserId = targetUserId, message = message }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUser_NoReply.EnterRoom(System.String name, Domain.IRoomObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.EnterRoom_Invoke { name = name, observer = observer }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.ExitFromRoom(System.String name)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.ExitFromRoom_Invoke { name = name }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.GetId()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.GetId_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.GetRoomList()
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.GetRoomList_Invoke {  }
            };
            SendRequest(requestMessage);
        }

        void IUser_NoReply.Whisper(System.String targetUserId, System.String message)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUser_PayloadTable.Whisper_Invoke { targetUserId = targetUserId, message = message }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUser
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUser Convert(IUser value)
        {
            if (value == null) return null;
            return new SurrogateForIUser { Actor = ((UserRef)value).Actor };
        }

        [ProtoConverter]
        public static IUser Convert(SurrogateForIUser value)
        {
            if (value == null) return null;
            return new UserRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IUserLogin

namespace Domain
{
    [PayloadTable(typeof(IUserLogin), PayloadTableKind.Request)]
    public static class IUserLogin_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Login_Invoke), typeof(Login_Return) },
            };
        }

        [ProtoContract, TypeAlias]
        public class Login_Invoke
            : IInterfacedPayload, IAsyncInvokable, IPayloadObserverUpdatable
        {
            [ProtoMember(1)] public System.String id;
            [ProtoMember(2)] public System.String password;
            [ProtoMember(3)] public Domain.IUserEventObserver observer;

            public Type GetInterfaceType()
            {
                return typeof(IUserLogin);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }

            void IPayloadObserverUpdatable.Update(Action<IInterfacedObserver> updater)
            {
                if (observer != null)
                {
                    updater(observer);
                }
            }
        }

        [ProtoContract, TypeAlias]
        public class Login_Return
            : IInterfacedPayload, IValueGetable, IPayloadActorRefUpdatable
        {
            [ProtoMember(1)] public Domain.IUser v;

            public Type GetInterfaceType()
            {
                return typeof(IUserLogin);
            }

            public object Value
            {
                get { return v; }
            }

            void IPayloadActorRefUpdatable.Update(Action<object> updater)
            {
                if (v != null)
                {
                    updater(v); 
                }
            }
        }
    }

    public interface IUserLogin_NoReply
    {
        void Login(System.String id, System.String password, Domain.IUserEventObserver observer);
    }

    public class UserLoginRef : InterfacedActorRef, IUserLogin, IUserLogin_NoReply
    {
        public UserLoginRef() : base(null)
        {
        }

        public UserLoginRef(IActorRef actor) : base(actor)
        {
        }

        public UserLoginRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUserLogin_NoReply WithNoReply()
        {
            return this;
        }

        public UserLoginRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserLoginRef(Actor, requestWaiter, Timeout);
        }

        public UserLoginRef WithTimeout(TimeSpan? timeout)
        {
            return new UserLoginRef(Actor, RequestWaiter, timeout);
        }

        public Task<Domain.IUser> Login(System.String id, System.String password, Domain.IUserEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observer = observer }
            };
            return SendRequestAndReceive<Domain.IUser>(requestMessage);
        }

        void IUserLogin_NoReply.Login(System.String id, System.String password, Domain.IUserEventObserver observer)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserLogin_PayloadTable.Login_Invoke { id = id, password = password, observer = observer }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserLogin
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUserLogin Convert(IUserLogin value)
        {
            if (value == null) return null;
            return new SurrogateForIUserLogin { Actor = ((UserLoginRef)value).Actor };
        }

        [ProtoConverter]
        public static IUserLogin Convert(SurrogateForIUserLogin value)
        {
            if (value == null) return null;
            return new UserLoginRef(value.Actor);
        }
    }
}

#endregion
#region Domain.IUserMessasing

namespace Domain
{
    [PayloadTable(typeof(IUserMessasing), PayloadTableKind.Request)]
    public static class IUserMessasing_PayloadTable
    {
        public static Type[,] GetPayloadTypes()
        {
            return new Type[,] {
                { typeof(Invite_Invoke), null },
                { typeof(Whisper_Invoke), null },
            };
        }

        [ProtoContract, TypeAlias]
        public class Invite_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public System.String invitorUserId;
            [ProtoMember(2)] public System.String roomName;

            public Type GetInterfaceType()
            {
                return typeof(IUserMessasing);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }

        [ProtoContract, TypeAlias]
        public class Whisper_Invoke
            : IInterfacedPayload, IAsyncInvokable
        {
            [ProtoMember(1)] public Domain.ChatItem chatItem;

            public Type GetInterfaceType()
            {
                return typeof(IUserMessasing);
            }

            public Task<IValueGetable> InvokeAsync(object __target)
            {
                return null;
            }
        }
    }

    public interface IUserMessasing_NoReply
    {
        void Invite(System.String invitorUserId, System.String roomName);
        void Whisper(Domain.ChatItem chatItem);
    }

    public class UserMessasingRef : InterfacedActorRef, IUserMessasing, IUserMessasing_NoReply
    {
        public UserMessasingRef() : base(null)
        {
        }

        public UserMessasingRef(IActorRef actor) : base(actor)
        {
        }

        public UserMessasingRef(IActorRef actor, IRequestWaiter requestWaiter, TimeSpan? timeout) : base(actor, requestWaiter, timeout)
        {
        }

        public IUserMessasing_NoReply WithNoReply()
        {
            return this;
        }

        public UserMessasingRef WithRequestWaiter(IRequestWaiter requestWaiter)
        {
            return new UserMessasingRef(Actor, requestWaiter, Timeout);
        }

        public UserMessasingRef WithTimeout(TimeSpan? timeout)
        {
            return new UserMessasingRef(Actor, RequestWaiter, timeout);
        }

        public Task Invite(System.String invitorUserId, System.String roomName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserMessasing_PayloadTable.Invite_Invoke { invitorUserId = invitorUserId, roomName = roomName }
            };
            return SendRequestAndWait(requestMessage);
        }

        public Task Whisper(Domain.ChatItem chatItem)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserMessasing_PayloadTable.Whisper_Invoke { chatItem = chatItem }
            };
            return SendRequestAndWait(requestMessage);
        }

        void IUserMessasing_NoReply.Invite(System.String invitorUserId, System.String roomName)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserMessasing_PayloadTable.Invite_Invoke { invitorUserId = invitorUserId, roomName = roomName }
            };
            SendRequest(requestMessage);
        }

        void IUserMessasing_NoReply.Whisper(Domain.ChatItem chatItem)
        {
            var requestMessage = new RequestMessage {
                InvokePayload = new IUserMessasing_PayloadTable.Whisper_Invoke { chatItem = chatItem }
            };
            SendRequest(requestMessage);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserMessasing
    {
        [ProtoMember(1)] public IActorRef Actor;

        [ProtoConverter]
        public static SurrogateForIUserMessasing Convert(IUserMessasing value)
        {
            if (value == null) return null;
            return new SurrogateForIUserMessasing { Actor = ((UserMessasingRef)value).Actor };
        }

        [ProtoConverter]
        public static IUserMessasing Convert(SurrogateForIUserMessasing value)
        {
            if (value == null) return null;
            return new UserMessasingRef(value.Actor);
        }
    }
}

#endregion
namespace Domain
{
    #region SurrogateForINotificationChannel

    [ProtoContract]
    public class SurrogateForINotificationChannel
    {
        [ProtoConverter]
        public static SurrogateForINotificationChannel Convert(INotificationChannel value)
        {
            if (value == null) return null;
            return new SurrogateForINotificationChannel();
        }

        [ProtoConverter]
        public static INotificationChannel Convert(SurrogateForINotificationChannel value)
        {
            return null;
        }
    }
}

#endregion
#region Domain.IRoomObserver

namespace Domain
{
    [PayloadTable(typeof(IRoomObserver), PayloadTableKind.Notification)]
    public static class IRoomObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Enter_Invoke),
                typeof(Exit_Invoke),
                typeof(Say_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class Enter_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType()
            {
                return typeof(IRoomObserver);
            }

            public void Invoke(object __target)
            {
                ((IRoomObserver)__target).Enter(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Exit_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.String userId;

            public Type GetInterfaceType()
            {
                return typeof(IRoomObserver);
            }

            public void Invoke(object __target)
            {
                ((IRoomObserver)__target).Exit(userId);
            }
        }

        [ProtoContract, TypeAlias]
        public class Say_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public Domain.ChatItem chatItem;

            public Type GetInterfaceType()
            {
                return typeof(IRoomObserver);
            }

            public void Invoke(object __target)
            {
                ((IRoomObserver)__target).Say(chatItem);
            }
        }
    }

    public class RoomObserver : InterfacedObserver, IRoomObserver
    {
        public RoomObserver()
            : base(null, 0)
        {
        }

        public RoomObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void Enter(System.String userId)
        {
            var payload = new IRoomObserver_PayloadTable.Enter_Invoke { userId = userId };
            Notify(payload);
        }

        public void Exit(System.String userId)
        {
            var payload = new IRoomObserver_PayloadTable.Exit_Invoke { userId = userId };
            Notify(payload);
        }

        public void Say(Domain.ChatItem chatItem)
        {
            var payload = new IRoomObserver_PayloadTable.Say_Invoke { chatItem = chatItem };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIRoomObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIRoomObserver Convert(IRoomObserver value)
        {
            if (value == null) return null;
            var o = (RoomObserver)value;
            return new SurrogateForIRoomObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IRoomObserver Convert(SurrogateForIRoomObserver value)
        {
            if (value == null) return null;
            return new RoomObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
#region Domain.IUserEventObserver

namespace Domain
{
    [PayloadTable(typeof(IUserEventObserver), PayloadTableKind.Notification)]
    public static class IUserEventObserver_PayloadTable
    {
        public static Type[] GetPayloadTypes()
        {
            return new Type[] {
                typeof(Whisper_Invoke),
                typeof(Invite_Invoke),
            };
        }

        [ProtoContract, TypeAlias]
        public class Whisper_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public Domain.ChatItem chatItem;

            public Type GetInterfaceType()
            {
                return typeof(IUserEventObserver);
            }

            public void Invoke(object __target)
            {
                ((IUserEventObserver)__target).Whisper(chatItem);
            }
        }

        [ProtoContract, TypeAlias]
        public class Invite_Invoke : IInterfacedPayload, IInvokable
        {
            [ProtoMember(1)] public System.String invitorUserId;
            [ProtoMember(2)] public System.String roomName;

            public Type GetInterfaceType()
            {
                return typeof(IUserEventObserver);
            }

            public void Invoke(object __target)
            {
                ((IUserEventObserver)__target).Invite(invitorUserId, roomName);
            }
        }
    }

    public class UserEventObserver : InterfacedObserver, IUserEventObserver
    {
        public UserEventObserver()
            : base(null, 0)
        {
        }

        public UserEventObserver(INotificationChannel channel, int observerId = 0)
            : base(channel, observerId)
        {
        }

        public void Whisper(Domain.ChatItem chatItem)
        {
            var payload = new IUserEventObserver_PayloadTable.Whisper_Invoke { chatItem = chatItem };
            Notify(payload);
        }

        public void Invite(System.String invitorUserId, System.String roomName)
        {
            var payload = new IUserEventObserver_PayloadTable.Invite_Invoke { invitorUserId = invitorUserId, roomName = roomName };
            Notify(payload);
        }
    }

    [ProtoContract]
    public class SurrogateForIUserEventObserver
    {
        [ProtoMember(1)] public INotificationChannel Channel;
        [ProtoMember(2)] public int ObserverId;

        [ProtoConverter]
        public static SurrogateForIUserEventObserver Convert(IUserEventObserver value)
        {
            if (value == null) return null;
            var o = (UserEventObserver)value;
            return new SurrogateForIUserEventObserver { Channel = o.Channel, ObserverId = o.ObserverId };
        }

        [ProtoConverter]
        public static IUserEventObserver Convert(SurrogateForIUserEventObserver value)
        {
            if (value == null) return null;
            return new UserEventObserver(value.Channel, value.ObserverId);
        }
    }
}

#endregion
